import speech_recognition as sr
import pyaudio # Necess√°rio como depend√™ncia do speech_recognition para microfone
import google.generativeai as genai
import os
from dotenv import load_dotenv

# --- Configura√ß√µes Iniciais ---

# Carregar vari√°veis de ambiente (sua chave da API)
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    print("Erro: Chave da API Gemini n√£o encontrada. Defina GEMINI_API_KEY no arquivo .env")
    exit()

# Configurar a API Gemini
try:
    genai.configure(api_key=GEMINI_API_KEY)
    # Escolha o modelo. 'gemini-pro' √© um bom modelo para texto.
    # 'gemini-1.5-flash' √© mais r√°pido e barato, mas 'gemini-1.5-pro' √© mais capaz.
    model = genai.GenerativeModel('gemini-2.0-flash') # ou 'gemini-pro' ou 'gemini-1.5-pro-latest'
except Exception as e:
    print(f"Erro ao configurar a API Gemini: {e}")
    exit()

# Configurar Reconhecimento de Fala
recognizer = sr.Recognizer()
microphone = sr.Microphone()

# Palavras-chave para identificar perguntas (pode ser melhorado com NLP)
question_keywords = [
    "o que", "qual", "quais", "quem", "como", "onde", "quando", "por que",
    "me diga", "explique", "voc√™ pode", "ser√° que", "?"
]

def is_question(text):
    text_lower = text.lower()
    if text_lower.endswith("?"):
        return True
    for keyword in question_keywords:
        # Verifica se a frase come√ßa com a palavra-chave ou cont√©m a palavra-chave com espa√ßos ao redor
        if text_lower.startswith(keyword) or f" {keyword} " in text_lower:
            return True
    return False

def get_gemini_answer(question_text):
    """Envia a pergunta para a API Gemini e retorna a resposta."""
    print("Consultando o Gemini...")
    try:
        # Voc√™ pode customizar o prompt para dar mais contexto ou instru√ß√µes ao Gemini
        # Exemplo: prompt = f"Voc√™ √© um assistente prestativo. Responda √† seguinte pergunta: {question_text}"
        prompt = question_text
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"Erro ao chamar a API Gemini: {e}")
        if hasattr(e, 'message') and "API key not valid" in e.message:
             print("Verifique se sua GEMINI_API_KEY est√° correta e v√°lida.")
        return "Desculpe, n√£o consegui obter uma resposta do Gemini no momento."

# --- Loop Principal ---
print("üéôÔ∏è Assistente de Conversa Ativado. Diga 'sair' para terminar.")
print("Ajustando para o ru√≠do ambiente... por favor, aguarde.")

with microphone as source:
    recognizer.adjust_for_ambient_noise(source, duration=2) # Ajusta ao ru√≠do ambiente por 2 segundos
    print("‚úÖ Ajuste de ru√≠do conclu√≠do. Pode falar!")

    while True:
        try:
            print("\nOuvindo...")
            # Definir um timeout para n√£o ficar bloqueado indefinidamente se n√£o houver fala
            # phrase_time_limit para o tempo m√°ximo que ele vai ouvir continuamente
            audio = recognizer.listen(source, timeout=5, phrase_time_limit=10)

            print("Reconhecendo fala...")
            # Usando Google Web Speech API (requer internet)
            # Para usar em portugu√™s: language="pt-BR"
            text = recognizer.recognize_google(audio, language="pt-BR")
            print(f"üó£Ô∏è Voc√™ disse: {text}")

            if "sair" in text.lower() or "parar" in text.lower():
                print("Encerrando assistente...")
                break

            if is_question(text):
                print("üîç Detectei uma pergunta!")
                answer = get_gemini_answer(text)
                print(f"ü§ñ Gemini: {answer}")
            else:
                print("üí¨ (N√£o pareceu uma pergunta)")

        except sr.WaitTimeoutError:
            # print("Nenhuma fala detectada no tempo esperado. Continue falando quando quiser.")
            pass # Silenciosamente continua escutando
        except sr.UnknownValueError:
            print("N√£o consegui entender o √°udio. Tente falar mais claramente.")
        except sr.RequestError as e:
            print(f"Erro ao solicitar resultados do servi√ßo de reconhecimento de fala; {e}")
        except KeyboardInterrupt:
            print("\nEncerrando script pelo usu√°rio.")
            break
        except Exception as e:
            print(f"Ocorreu um erro inesperado: {e}")
            break